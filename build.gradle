plugins {
	id 'java-gradle-plugin'
	id 'jvm-test-suite'
	id 'org.checkerframework'
	id 'groovy'

	id 'com.gradle.plugin-publish'

	id 'com.github.spotbugs'
	id 'checkstyle'
	id 'pmd'

	id 'me.qoomon.git-versioning'

	id 'idea'
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	consistentResolution {
		useCompileClasspathVersions()
	}
}

checkerFramework {
	checkers = [
		'org.checkerframework.checker.nullness.NullnessChecker',
		'org.checkerframework.common.initializedfields.InitializedFieldsChecker',
		'org.checkerframework.checker.formatter.FormatterChecker',
		'org.checkerframework.common.value.ValueChecker'
	]

	extraJavacArgs = [
		'-AskipUses=io.vavr|java.io.BufferedReader'
	]
}

testing {
	suites {
		test(JvmTestSuite) {
			useSpock()
		}

		integrationTest(JvmTestSuite) {
			useSpock()

			dependencies {
				implementation project()
			}
		}

		functionalTest(JvmTestSuite) {
			useSpock()
		}
	}
}

functionalTest {
	testLogging {
		showStandardStreams = true
	}
}

gradlePlugin {
	website.set('https://github.com/birdflyer-lszo/gradle-service-control')
	vcsUrl.set('https://github.com/birdflyer-lszo/gradle-service-control')

	plugins {
		javaServiceControl {
			id = 'com.brunoritz.gradle.java-service-control'
			implementationClass = 'com.brunoritz.gradle.servicecontrol.JavaServiceControlPlugin'

			displayName = 'Service Control Plugin'
			description = 'Allows starting, stopping and restarting of Java services in developer environments'
			tags.set(['java', 'service', 'testing'])
		}

		genericServiceControl {
			id = 'com.brunoritz.gradle.generic-service-control'
			implementationClass = 'com.brunoritz.gradle.servicecontrol.GenericServiceControlPlugin'

			displayName = 'Service Control Plugin'
			description = 'Allows starting, stopping and restarting of generic services in developer environments'
			tags.set(['generic', 'service', 'testing'])
		}
	}

	testSourceSets(sourceSets.integrationTest, sourceSets.functionalTest)
}

configurations {
	integrationTestImplementation.extendsFrom testImplementation
}

dependencies {
	implementation 'com.github.spotbugs:spotbugs-annotations:4.7.3'
	implementation 'commons-io:commons-io:2.14.0'
	implementation 'io.vavr:vavr:0.10.4'
	implementation 'net.jcip:jcip-annotations:1.0'

	testImplementation 'cglib:cglib-nodep:3.3.0'
	testImplementation 'org.spockframework:spock-core'
}

spotbugs {
	excludeFilter.set(file('config/spotbugs-exclusions.xml'))
	showStackTraces.set(false)

	effort = 'max'
}

spotbugsMain {
	reports {
		xml {}
	}
}

spotbugsIntegrationTest {
	enabled = false
}

spotbugsFunctionalTest {
	enabled = false
}

pmd {
	toolVersion = '6.33.0'
	consoleOutput = true
	ruleSets = []
	reportsDir = layout.buildDirectory.dir('reports/pmd').get().asFile
	ruleSetFiles = files("${rootDir}/config/pmd-rules.xml")
	ignoreFailures = true
}

group = 'com.brunoritz.gradle'

gitVersioning.apply {
	rev {
		version = '${describe.tag.version}-dev+${commit.short}'
	}

	refs {
		tag("v(?<version>.*)") {
			version = "\${ref.version}"
		}
	}
}

idea {
	module {
		testSources.from(
			sourceSets.integrationTest.java.srcDirs,
			sourceSets.functionalTest.java.srcDirs
		)

		testResources.from(
			sourceSets.integrationTest.resources.srcDirs,
			sourceSets.functionalTest.resources.srcDirs
		)
	}
}
